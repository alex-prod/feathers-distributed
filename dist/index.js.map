{"version":3,"sources":["../src/index.js"],"names":["debug","init","options","distributionOptions","Object","assign","publicationDelay","app","coteOptions","cote","uuid","servicePublisher","Publisher","name","namespace","broadcasts","log","on","data","setTimeout","_","getOwnPropertyNames","services","forEach","path","publish","serviceSubscriber","Subscriber","subscribesTo","serviceDescriptor","service","RemoteService","use","hooks","emit","errorHandler","superUse","apply","arguments","remote","responder","LocalService","module","exports","default"],"mappings":"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","sourcesContent":["import { stripSlashes } from '@feathersjs/commons';\nimport makeCote from './cote';\nimport uuid from 'uuid/v4';\nimport makeDebug from 'debug';\nimport { LocalService, RemoteService } from './service';\n\nconst debug = makeDebug('feathers-distributed');\n\nfunction init (options) {\n  return function () {\n    const distributionOptions = Object.assign(\n      {\n        publicationDelay: 5000\n      },\n      options\n    );\n    let app = this;\n    // Because options are forwarded and assigned to defaults options of services allocate an empty object if nothing is provided\n    app.coteOptions = distributionOptions.cote || {};\n    app.cote = (distributionOptions.cote ? makeCote(distributionOptions.cote) : makeCote());\n    // We need to uniquely identify the app to avoid infinite loop by registering our own services\n    app.uuid = uuid();\n    debug('Initializing feathers-distributed');\n\n    // This publisher publishes an event each time a local app service is registered\n    app.servicePublisher = new app.cote.Publisher(\n      {\n        name: 'feathers services publisher',\n        namespace: 'services',\n        broadcasts: ['service']\n      },\n      Object.assign({ log: false }, app.coteOptions)\n    );\n    // Also each time a new node pops up so that it does not depend of the initialization order of the apps\n    app.servicePublisher.on('cote:added', data => {\n      // console.log(data)\n      // Add a timeout so that the subscriber has been initialized on the node\n      setTimeout(_ => {\n        Object.getOwnPropertyNames(app.services).forEach(path => {\n          app.servicePublisher.publish('service', { uuid: app.uuid, path });\n          debug('Republished local service on path ' + path);\n        });\n      }, distributionOptions.publicationDelay);\n    });\n    // This subscriber listen to an event each time a remote app service has been registered\n    app.serviceSubscriber = new app.cote.Subscriber(\n      {\n        name: 'feathers services subscriber',\n        namespace: 'services',\n        subscribesTo: ['service']\n      },\n      Object.assign({ log: false }, app.coteOptions)\n    );\n    // When a remote service is declared create the local proxy interface to it\n    app.serviceSubscriber.on('service', serviceDescriptor => {\n      // Do not register our own services\n      if (serviceDescriptor.uuid === app.uuid) {\n        debug('Do not register service as remote on path ' + serviceDescriptor.path);\n        return;\n      }\n      // Skip already registered services\n      const service = app.service(serviceDescriptor.path);\n      if (service) {\n        if (service instanceof RemoteService) {\n          debug('Already registered service as remote on path ' + serviceDescriptor.path);\n        } else {\n          debug('Already registered local service on path ' + serviceDescriptor.path);\n        }\n        return;\n      }\n      app.use(serviceDescriptor.path, new RemoteService(serviceDescriptor));\n      debug('Registered remote service on path ' + serviceDescriptor.path);\n\n      // registering hook object on every remote service\n      if (distributionOptions.hooks) {\n        app.service(serviceDescriptor.path).hooks(distributionOptions.hooks);\n      }\n      debug('Registered hooks on remote service on path ' + serviceDescriptor.path);\n\n      // dispatch an event internally through node so that async processes can run\n      app.emit('service', serviceDescriptor);\n\n      // register error handler\n      if (distributionOptions.errorHandler) {\n        app.use(distributionOptions.errorHandler);\n      }\n    });\n\n    // We replace the use method to inject service publisher/responder\n    const superUse = app.use;\n    app.use = function (path, service) {\n      // Register the service normally first\n      superUse.apply(app, arguments);\n      // Note: middlewares are not supported\n      // Also avoid infinite loop by registering already registered remote services\n      if (typeof service === 'object' && !service.remote) {\n        // Publish new local service\n        app.servicePublisher.publish('service', { uuid: app.uuid, path: stripSlashes(path) });\n        debug('Published local service on path ' + path);\n        // Register the responder to handle remote calls to the service\n        service.responder = new LocalService({ app, path: stripSlashes(path) });\n      }\n    };\n  };\n}\n\ninit.RemoteService = RemoteService;\ninit.LocalService = LocalService;\n\nmodule.exports = init;\nmodule.exports.default = init;\n"],"file":"index.js"}