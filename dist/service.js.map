{"version":3,"sources":["../src/service.js"],"names":["debug","RemoteService","constructor","options","remote","setup","app","path","requester","cote","Requester","name","namespace","requests","Object","assign","log","coteOptions","serviceEventsSubscriber","Subscriber","subscribesTo","on","object","emit","find","params","send","type","then","result","get","id","create","data","update","patch","remove","LocalService","Responder","respondsTo","service","req","serviceEventsPublisher","Publisher","broadcasts","publish"],"mappings":"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","sourcesContent":["import cote from 'cote';\r\nimport makeDebug from 'debug';\r\n\r\nconst debug = makeDebug('feathers-distributed:service');\r\n\r\n// This is the Feathers service abstraction for a cote requester on remote\r\nclass RemoteService {\r\n  constructor (options) {\r\n    // This flag indicates to the plugin this is a remote service\r\n    this.remote = true;\r\n  }\r\n\r\n  setup (app, path) {\r\n    // Create the request manager to remote ones for this service\r\n    this.requester = new app.cote.Requester({\r\n      name: path + ' requester',\r\n      namespace: path,\r\n      requests: ['find', 'get', 'create', 'update', 'patch', 'remove']\r\n    }, Object.assign({ log: false }, app.coteOptions));\r\n    this.path = path;\r\n    debug('Requester created for remote service on path ' + this.path);\r\n    // Create the subscriber to listen to events from other nodes\r\n    this.serviceEventsSubscriber = new app.cote.Subscriber({\r\n      name: path + ' events subscriber',\r\n      namespace: path,\r\n      subscribesTo: ['created', 'updated', 'patched', 'removed']\r\n    }, { log: false });\r\n    this.serviceEventsSubscriber.on('created', object => {\r\n      this.emit('created', object);\r\n    });\r\n    this.serviceEventsSubscriber.on('updated', object => {\r\n      this.emit('updated', object);\r\n    });\r\n    this.serviceEventsSubscriber.on('patched', object => {\r\n      this.emit('patched', object);\r\n    });\r\n    this.serviceEventsSubscriber.on('removed', object => {\r\n      this.emit('removed', object);\r\n    });\r\n    debug('Subscriber created for remote service events on path ' + this.path);\r\n  }\r\n\r\n  // Perform requests to other nodes\r\n  find (params) {\r\n    debug('Requesting find() remote service on path ' + this.path, params);\r\n    return this.requester.send({ type: 'find', params }).then(result => {\r\n      debug('Successfully find() remote service on path ' + this.path);\r\n      return result;\r\n    });\r\n  }\r\n\r\n  get (id, params) {\r\n    debug('Requesting get() remote service on path ' + this.path, id, params);\r\n    return this.requester.send({ type: 'get', id, params }).then(result => {\r\n      debug('Successfully get() remote service on path ' + this.path);\r\n      return result;\r\n    });\r\n  }\r\n\r\n  create (data, params) {\r\n    debug('Requesting create() remote service on path ' + this.path, data, params);\r\n    return this.requester.send({ type: 'create', data, params }).then(result => {\r\n      debug('Successfully create() remote service on path ' + this.path);\r\n      return result;\r\n    });\r\n  }\r\n\r\n  update (id, data, params) {\r\n    debug('Requesting update() remote service on path ' + this.path, id, data, params);\r\n    return this.requester.send({ type: 'update', id, data, params }).then(result => {\r\n      debug('Successfully update() remote service on path ' + this.path);\r\n      return result;\r\n    });\r\n  }\r\n\r\n  patch (id, data, params) {\r\n    debug('Requesting patch() remote service on path ' + this.path, id, data, params);\r\n    return this.requester.send({ type: 'patch', id, data, params }).then(result => {\r\n      debug('Successfully patch() remote service on path ' + this.path);\r\n      return result;\r\n    });\r\n  }\r\n\r\n  remove (id, params) {\r\n    debug('Requesting remove() remote service on path ' + this.path, id, params);\r\n    return this.requester.send({ type: 'remove', id, params }).then(result => {\r\n      debug('Successfully remove() remote service on path ' + this.path);\r\n      return result;\r\n    });\r\n  }\r\n}\r\n\r\n// This is the cote responder abstraction for a local Feathers service\r\nclass LocalService extends cote.Responder {\r\n  constructor (options) {\r\n    const app = options.app;\r\n    const path = options.path;\r\n    super({ name: path + ' responder', namespace: path, respondsTo: ['find', 'get', 'create', 'update', 'patch', 'remove'] }, { log: false });\r\n    debug('Responder created for local service on path ' + path);\r\n    let service = app.service(path);\r\n\r\n    // Answer requests from other nodes\r\n    this.on('find', (req) => {\r\n      debug('Responding find() local service on path ' + path);\r\n      return service.find(req.params).then((result) => {\r\n        debug('Successfully find() local service on path ' + path);\r\n        return result;\r\n      });\r\n    });\r\n    this.on('get', (req) => {\r\n      debug('Responding get() local service on path ' + path);\r\n      return service.get(req.id, req.params).then((result) => {\r\n        debug('Successfully get() local service on path ' + path);\r\n        return result;\r\n      });\r\n    });\r\n    this.on('create', (req) => {\r\n      debug('Responding create() local service on path ' + path);\r\n      return service.create(req.data, req.params).then((result) => {\r\n        debug('Successfully create() local service on path ' + path);\r\n        return result;\r\n      });\r\n    });\r\n    this.on('update', (req) => {\r\n      debug('Responding update() local service on path ' + path);\r\n      return service.update(req.id, req.data, req.params).then((result) => {\r\n        debug('Successfully update() local service on path ' + path);\r\n        return result;\r\n      });\r\n    });\r\n    this.on('patch', (req) => {\r\n      debug('Responding patch() local service on path ' + path);\r\n      return service.patch(req.id, req.data, req.params).then((result) => {\r\n        debug('Successfully patch() local service on path ' + path);\r\n        return result;\r\n      });\r\n    });\r\n    this.on('remove', (req) => {\r\n      debug('Responding remove() local service on path ' + path);\r\n      return service.remove(req.id, req.params).then((result) => {\r\n        debug('Successfully remove() local service on path ' + path);\r\n        return result;\r\n      });\r\n    });\r\n\r\n    // Dispatch events to other nodes\r\n    this.serviceEventsPublisher = new app.cote.Publisher({\r\n      name: path + ' events publisher',\r\n      namespace: path,\r\n      broadcasts: ['created', 'updated', 'patched', 'removed']\r\n    }, Object.assign({ log: false }, app.coteOptions));\r\n    service.on('created', object => {\r\n      this.serviceEventsPublisher.publish('created', object);\r\n    });\r\n    service.on('updated', object => {\r\n      this.serviceEventsPublisher.publish('updated', object);\r\n    });\r\n    service.on('patched', object => {\r\n      this.serviceEventsPublisher.publish('patched', object);\r\n    });\r\n    service.on('removed', object => {\r\n      this.serviceEventsPublisher.publish('removed', object);\r\n    });\r\n    debug('Publisher created for local service events on path ' + path);\r\n  }\r\n}\r\n\r\nexport default {\r\n  RemoteService,\r\n  LocalService\r\n};\r\n"],"file":"service.js"}